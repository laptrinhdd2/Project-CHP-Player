package com.nxchien.chpmusic.ui.tabs.pager;

import android.animation.Animator;
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.CollapsingToolbarLayout;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;
import android.widget.TextView;

import com.nxchien.chpmusic.App;
import com.nxchien.chpmusic.loader.LastAddedLoader;
import com.nxchien.chpmusic.loader.SongLoader;
import com.nxchien.chpmusic.loader.TopTracksLoader;
import com.nxchien.chpmusic.ui.popup.SortOrderBottomSheet;
import com.nxchien.chpmusic.ui.tabs.library.ArtistAdapter;
import com.nxchien.chpmusic.ui.tabs.library.SongAdapter;
import com.nxchien.chpmusic.ui.widget.fragmentnavigationcontroller.PresentStyle;
import com.nxchien.chpmusic.ui.widget.fragmentnavigationcontroller.SupportFragment;
import com.nxchien.chpmusic.util.AutoGeneratedPlaylistBitmap;
import com.nxchien.chpmusic.R;
import com.nxchien.chpmusic.ui.BaseActivity;
import com.nxchien.chpmusic.loader.PlaylistSongLoader;
import com.nxchien.chpmusic.service.MusicStateListener;
import com.nxchien.chpmusic.model.Playlist;
import com.nxchien.chpmusic.model.Song;
import com.nxchien.chpmusic.ui.widget.BlurImageViewChildConstraintLayout;
import com.nxchien.chpmusic.util.Tool;
import com.simplecityapps.recyclerview_fastscroll.views.FastScrollRecyclerView;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import butterknife.OnTouch;

public class PlaylistPagerFragment extends SupportFragment implements MusicStateListener, SortOrderBottomSheet.SortOrderChangedListener {
    private static final String TAG ="PlaylistPagerFragment";

    @Override
    public int getPresentTransition() {
        return PresentStyle.ACCORDION_LEFT;
    }

    @BindView(R.id.play_all_button) TextView mPlayAllButton;
    @BindView(R.id.play_all_icon) ImageView mPlayAllIcon;
    @BindView(R.id.shuffle_play_button) TextView mPlayRandomButton;

    @BindView(R.id.more_playlist) View mMoreButton;

    @BindView(R.id.playlist_big_rv) RecyclerView mRecyclerView;

    @BindView(R.id.art) ImageView mImage;
    @BindView(R.id.title) TextView mTitle;
    @BindView(R.id.artist) TextView mArtist;

    @BindView(R.id.toolbar) Toolbar toolbar;

    @BindView(R.id.background_constraint)
    BlurImageViewChildConstraintLayout back_constraint;
    @BindView(R.id.playlist_pager_collapsing_toolbar) CollapsingToolbarLayout collapsingToolbarLayout;
    @BindView(R.id.play_option_panel) View mPlayOptionPanel;

    @BindView(R.id.swipe_refresh)
    SwipeRefreshLayout mSwipeRefresh;

    SongAdapter mAdapter;

    Playlist mPlaylist;
    @OnClick(R.id.play_all_panel)
    void playAll() {
    mAdapter.playAll();
    }

    @OnTouch(R.id.art)
    boolean onTouchArt(View view, MotionEvent event) {
        if(event.getAction()==MotionEvent.ACTION_DOWN) {
           return false;

        }
        return false;
    }

    @OnClick(R.id.shuffle_play_button)
    void playRandom() {

        mAdapter.shuffle();
    }

    @Override
    public void restartLoader() {

    }

    @Override
    public void onPlaylistChanged() {

    }
    public void setTheme() {
        int buttonColor = ArtistAdapter.lighter(Tool.getBaseColor(),0.25f);
        int heavyColor = Tool.getHeavyColor();
        mPlayAllButton.setTextColor(buttonColor);
        mPlayAllIcon.setColorFilter(buttonColor);
        mPlayRandomButton.setTextColor(buttonColor);
        mTitle.setTextColor(Tool.getBaseColor());
        if(mRecyclerView instanceof FastScrollRecyclerView) {
            ((FastScrollRecyclerView)mRecyclerView).setPopupBgColor(heavyColor);
            ((FastScrollRecyclerView)mRecyclerView).setThumbColor(heavyColor);
        }
    }
    @Override
    public void onMetaChanged() {
        setTheme();
        mAdapter.notifyMetaChanged();
    }

    Bitmap mPreviewBitmap;

    public static PlaylistPagerFragment newInstance(Context context,Playlist playlist,@Nullable Bitmap previewBitmap) {
        PlaylistPagerFragment fragment = new PlaylistPagerFragment();
        fragment.mPlaylist = playlist;
        fragment.mPreviewBitmap = previewBitmap;
        return fragment;
    }


    private int[] getRelativePosition(View v) {
        int[] locationInScreen = new int[2]; // view's position in scrren
        int[] parentLocationInScreen = new int[2]; // parent view's position in screen
        v.getLocationOnScreen(locationInScreen);
        View parentView = (View)v.getParent();
        parentView.getLocationOnScreen(parentLocationInScreen);
        float relativeX = locationInScreen[0] - parentLocationInScreen[0];
        float relativeY = locationInScreen[1] - parentLocationInScreen[1];
        return new int[]{(int) relativeX, (int) relativeY};
    }

    @Override
    public void onDestroyView() {
        if(mLoadPlaylist!=null) mLoadPlaylist.cancel();
        super.onDestroyView();
    }

    @Override
    public void onPause() {
        Activity a = getActivity();
        if(a instanceof BaseActivity)
        ((BaseActivity)getActivity()).removeMusicStateListener(this);

        super.onPause();
    }

    @Override
    public void onResume() {
        super.onResume();

        Activity a = getActivity();
        if(a instanceof BaseActivity)
            ((BaseActivity)getActivity()).addMusicStateListener(this);
    }




    @Nullable
    @Override
    protected View onCreateView(LayoutInflater inflater, ViewGroup container) {
        return inflater.inflate(R.layout.playlist_page,container,false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        ButterKnife.bind(this,view);
        initSortOrder();
        mAdapter = new SongAdapter(getActivity());
        mAdapter.setSortOrderChangedListener(this);
        mRecyclerView.setAdapter(mAdapter);

        mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext(),LinearLayoutManager.VERTICAL,false));
        setupToolbar();
        setTheme();

        if(mPreviewBitmap !=null) {
            mImage.setImageBitmap(mPreviewBitmap);
            back_constraint.setBitmapImage(mPreviewBitmap);
            mPreviewBitmap = null;
        }
        setName();
        mSwipeRefresh.setColorSchemeResources(R.color.FlatOrange);
        mSwipeRefresh.setOnRefreshListener(this::refreshData);
    }

    public static List<Song> getPlaylistWithListId(@NonNull Context context, Playlist list, String sortOrder) {

        if(list.name.equals(context.getString(R.string.playlist_last_added))) return LastAddedLoader.getLastAddedSongs(context, sortOrder);
        else if(list.name.equals(context.getString(R.string.playlist_recently_played))) {
            return SongLoader.getSongsForCursor(TopTracksLoader.getCursor());
        } else if(list.name.equals(context.getString(R.string.playlist_top_tracks))) {
            return SongLoader.getSongsForCursor(TopTracksLoader.getCursor());
        } else
        return PlaylistSongLoader.getSongsInPlaylist(context, list.id);
    }
    private void setName() {
        mTitle.setText(mPlaylist.name);
        List<Song> songs = mAdapter.getData();
        ArrayList<String> names = new ArrayList<>();
        for(int i=0;i<songs.size()&&names.size()<5;i++) {
            Song song = songs.get(i);
            if(!names.contains(song.artistName)) names.add(song.artistName);
        }

       mArtist.setText(TextUtils.join(", ", names));
    }

    private void refreshData() {
        refreshData(true);
    };
    private void refreshData(boolean b) {
        mSwipeRefresh.setRefreshing(b);
        mSwipeRefresh.post(() -> {
            if(mLoadPlaylist!=null) mLoadPlaylist.cancel();
            mLoadPlaylist = new loadPlaylist(PlaylistPagerFragment.this);
            mLoadPlaylist.execute();
        });
    }

    @Override
    public Animator onCreateAnimator(int transit, boolean enter, int nextAnim) {
        Animator animator = super.onCreateAnimator(transit, enter, nextAnim);
        mSwipeRefresh.postDelayed(() -> refreshData(false),animator.getDuration());
        return animator;
    }

    @Override
    public void onSetStatusBarMargin(int value) {
        ((ViewGroup.MarginLayoutParams)toolbar.getLayoutParams()).topMargin = value;
        toolbar.requestLayout();
        int padding_top_back_constraint = (int) (56*getResources().getDimension(R.dimen.oneDP) + 2*value);

        ((ViewGroup.MarginLayoutParams)mPlayOptionPanel.getLayoutParams()).topMargin = value;
        back_constraint.setPadding(back_constraint.getPaddingLeft(),padding_top_back_constraint,back_constraint.getPaddingRight(), 0);
    }

    private void setupToolbar() {
        if(getActivity() instanceof AppCompatActivity) {
            ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);

            ActionBar ab = ((AppCompatActivity) getActivity()).getSupportActionBar();
            if (ab != null) {
                ab.setDisplayHomeAsUpEnabled(true);
                ab.setDisplayShowHomeEnabled(true);
                ab.setDisplayShowTitleEnabled(false);
            }
        }
    }

    private loadPlaylist mLoadPlaylist;

    private int mCurrentSortOrder = 0;

    private void initSortOrder() {
        if (mPlaylist != null && !mPlaylist.name.isEmpty()) {
            int defaultOrder = 0;
            if(mPlaylist.name.equals(getResources().getString(R.string.playlist_last_added))) defaultOrder = 2;
            mCurrentSortOrder = App.getInstance().getPreferencesUtility().getSharePreferences().getInt("sort_order_playlist_" + mPlaylist.name + "_" + mPlaylist.id, defaultOrder);

        }
    }

    @Override
    public int getSavedOrder() {
        return mCurrentSortOrder;
    }

    @Override
    public void onOrderChanged(int newType, String name) {
        if(mCurrentSortOrder!=newType) {
            mCurrentSortOrder = newType;
            App.getInstance().getPreferencesUtility().getSharePreferences().edit().putInt("sort_order_playlist_"+mPlaylist.name+"_"+mPlaylist.id,mCurrentSortOrder).commit();
            refreshData();
        }
    }

    private static class loadPlaylist extends AsyncTask<Void, Void, List<Song>> {
        PlaylistPagerFragment mFragment;
        private loadArtwork mLoadArtwork;

        loadPlaylist(PlaylistPagerFragment fragment) {
            mFragment = fragment;
        }

        @Override
        protected void onPostExecute(List<Song> songs) {
            if(mFragment!=null) {
                mFragment.mAdapter.setData(songs);
                mFragment.setName();
                if(mLoadArtwork!=null) mLoadArtwork.cancel();
                mLoadArtwork= new loadArtwork(mFragment);
                mLoadArtwork.execute();
                mFragment.mSwipeRefresh.setRefreshing(false);
                mFragment.mLoadPlaylist = null;
            }
        }

        @Override
        protected List<Song> doInBackground(Void... voids) {
            if(mFragment==null) return null;
            Context context = mFragment.getContext();
            if(context==null) return null;
           return getPlaylistWithListId(mFragment.getContext(),mFragment.mPlaylist, SortOrderBottomSheet.mSortOrderCodes[mFragment.mCurrentSortOrder]);
        }

        public void cancel() {
            if(mLoadArtwork!=null) mLoadArtwork.cancel();
            cancel(true);
            mFragment = null;

        }
    }

    private static class loadArtwork extends AsyncTask<Void,Void,Bitmap> {
        PlaylistPagerFragment mFragment;
        loadArtwork(PlaylistPagerFragment fragment) {
            mFragment = fragment;
        }
        public void cancel() {
            cancel(true);
            mFragment = null;
        }

        @Override
        protected Bitmap doInBackground(Void... voids) {
            if(mFragment==null) return null;
            Bitmap bmp=null;
            try {
                bmp = AutoGeneratedPlaylistBitmap.getBitmap(mFragment.getContext(), mFragment.mAdapter.getData(), false, false);
            } catch (Exception ignore) {}
            return bmp;
            }
        @Override
        protected void onPostExecute(Bitmap bitmap) {
            if(mFragment!=null&&bitmap!=null) {
                mFragment.mImage.setImageBitmap(bitmap);
                mFragment.back_constraint.setBitmapImage(bitmap);

                mFragment = null;
            }
        }


    }

}
