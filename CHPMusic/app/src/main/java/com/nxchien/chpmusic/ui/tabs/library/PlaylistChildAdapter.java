package com.nxchien.chpmusic.ui.tabs.library;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.RippleDrawable;
import android.os.AsyncTask;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;
import android.widget.TextView;


import com.nxchien.chpmusic.ui.tabs.feature.FeaturePlaylistAdapter;
import com.nxchien.chpmusic.util.AutoGeneratedPlaylistBitmap;
import com.nxchien.chpmusic.ui.widget.BounceInterpolator;
import com.nxchien.chpmusic.util.Tool;
import com.nxchien.chpmusic.R;
import com.nxchien.chpmusic.loader.LastAddedLoader;
import com.nxchien.chpmusic.loader.PlaylistSongLoader;
import com.nxchien.chpmusic.loader.SongLoader;
import com.nxchien.chpmusic.loader.TopTracksLoader;
import com.nxchien.chpmusic.model.Playlist;
import com.nxchien.chpmusic.model.Song;
import com.nxchien.chpmusic.util.Utils;
import com.makeramen.roundedimageview.RoundedDrawable;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;

public class PlaylistChildAdapter extends RecyclerView.Adapter<PlaylistChildAdapter.ItemHolder> {
    private static final String TAG = "PlaylistAdapter";
    public ArrayList<Playlist> mPlaylistData = new ArrayList<>();
    public FeaturePlaylistAdapter.PlaylistClickListener mListener;
    private Context mContext;
    private boolean showAuto;
    private int songCountInt;
    private long firstAlbumID = -1;

    public PlaylistChildAdapter(Context mContext, boolean showAuto) {
        this.mContext = mContext;
        this.showAuto = showAuto;
    }

    public void setOnItemClickListener(FeaturePlaylistAdapter.PlaylistClickListener listener) {
        mListener = listener;
    }


    public void setData(List<Playlist> data) {
        mPlaylistData.clear();
        if (data != null) {
            mPlaylistData.addAll(data);
            notifyDataSetChanged();

        }
    }

    public void addData(ArrayList<Playlist> data) {
        if (data != null) {
            int posBefore = mPlaylistData.size();
            mPlaylistData.addAll(data);
            notifyItemRangeInserted(posBefore, data.size());
        }
    }


    @Override
    public ItemHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
        View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_playlist_child, viewGroup, false);
        return new ItemHolder(v);
    }

    @Override
    public void onBindViewHolder(final ItemHolder itemHolder, int i) {
        // Lấy item Playlist thứ i
        final Playlist playlist = mPlaylistData.get(i);

        new PlaylistBitmapLoader(this, playlist, itemHolder).execute();

        itemHolder.mImage.setTag(firstAlbumID);
        itemHolder.mTitle.setText(playlist.name);
        if (Utils.isLollipop()) itemHolder.mImage.setTransitionName("transition_album_art" + i);
    }

    @Override
    public int getItemCount() {
        return mPlaylistData.size();
    }


    public List<Song> getPlaylistWithListId(int position, long id) {
        if (mContext != null) {
            firstAlbumID = -1;
            if (showAuto) {
                switch (position) {
                    case 0:
                        return LastAddedLoader.getLastAddedSongs(mContext);
                    case 1:
                        return SongLoader.getSongsForCursor(TopTracksLoader.getCursor());
                    case 2:
                        return SongLoader.getSongsForCursor(TopTracksLoader.getCursor());
                    default:
                        return PlaylistSongLoader.getSongsInPlaylist(mContext, id);
                }
            } else PlaylistSongLoader.getSongsInPlaylist(mContext, id);
        }
        return null;
    }

    public class ItemHolder extends RecyclerView.ViewHolder implements View.OnClickListener, View.OnTouchListener {
        @BindView(R.id.title)
        TextView mTitle;
        @BindView(R.id.image)
        ImageView mImage;
        @BindView(R.id.over)
        View view_over;
        int currentColor = 0;

        ItemHolder(View view) {
            super(view);
            ButterKnife.bind(this, view);
            view_over.setOnClickListener(this);
            view_over.setOnTouchListener(this);
        }

        @Override
        public void onClick(View v) {
            //Todo: Navigate to playlist detail
            final android.view.animation.Animation myAnim = AnimationUtils.loadAnimation(mContext, R.anim.bounce_slow);
            BounceInterpolator interpolator = new BounceInterpolator(0.1, 30);
            myAnim.setInterpolator(interpolator);
            myAnim.setDuration(350);
            itemView.startAnimation(myAnim);

            if (mListener != null) {
                Bitmap bitmap = null;
                Drawable d = mImage.getDrawable();
                if (d instanceof BitmapDrawable) bitmap = ((BitmapDrawable) d).getBitmap();
                else if (d instanceof RoundedDrawable)
                    bitmap = ((RoundedDrawable) d).getSourceBitmap();
                mListener.onClickPlaylist(mPlaylistData.get(getAdapterPosition()), bitmap);
            }
        }

        @Override
        public boolean onTouch(View view, MotionEvent motionEvent) {
            if (currentColor != Tool.getBaseColor()) {
                currentColor = Tool.getBaseColor();
                ((RippleDrawable) view_over.getBackground()).setColor(ColorStateList.valueOf(Tool.getBaseColor()));
            }
            return false;
        }
    }


    private static class PlaylistBitmapLoader extends AsyncTask<Void, Void, Bitmap> {
        private PlaylistChildAdapter mAdapter;
        private ItemHolder mItemHolder;
        private Playlist mPlaylist;

        PlaylistBitmapLoader(PlaylistChildAdapter adapter, Playlist playlist, ItemHolder item) {
            mAdapter = adapter;
            mItemHolder = item;
            mPlaylist = playlist;
        }

        @Override
        protected void onPostExecute(Bitmap bitmap) {
            mItemHolder.mImage.setImageBitmap(bitmap);
        }

        @Override
        protected Bitmap doInBackground(Void... v) {

            List<Song> l = mAdapter.getPlaylistWithListId(mItemHolder.getAdapterPosition(), mPlaylist.id);
            return AutoGeneratedPlaylistBitmap.getBitmap(mAdapter.mContext, l, false, false);
        }
    }

}